buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.4.0'
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.vanniktech.maven.publish'
    apply from: rootProject.file('gradle/checkstyle.gradle')

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven {
            name 'sonatype-release'
            url 'https://oss.sonatype.org/content/groups/public'
        }
        mavenCentral()
        jcenter()
        mavenLocal()
    }

    mavenPublish {
        releaseRepositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    ext.versions = [
            'guice'         : '4.2.0',
            'dject'         : '1.1.0',
            'protobuf'      : '3.6.1',
            'metrics'       : '4.0.3',
            'kafka'         : '2.0.0',
            'servlet'       : '4.0.1',
            'jetty'         : '9.4.11.v20180605',
            'logback'       : '1.2.3',
            'slf4j'         : '1.7.25',

            'junit'         : '4.12',
            'mockito'       : '2.21.0',
            'restassured'   : '3.1.0',
            'assertj'       : '3.10.0',
            'awaitility': '3.1.2'
    ]

    dependencies {
        compile "ch.qos.logback:logback-classic:$versions.logback"
        compile "org.slf4j:slf4j-api:$versions.slf4j"

        testCompile "org.slf4j:slf4j-log4j12:$versions.slf4j"
        testCompile "junit:junit:$versions.junit"
        testCompile "org.mockito:mockito-core:$versions.mockito"
        testCompile "org.assertj:assertj-core:$versions.assertj"
        testCompile "org.awaitility:awaitility:$versions.awaitility"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        executionData = fileTree('build/jacoco').include('**/*.exec')
    }

    test {
        useJUnit {
            excludeCategories "com.github.dxee.jood.IntegrationTest"
        }
    }

    task integrationTest(type: Test) {
        description "Run more heavyweight JUnit integration tests."
        group "verification"
        useJUnit {
            includeCategories "com.github.dxee.jood.IntegrationTest"
        }
        shouldRunAfter test
    }

    check.dependsOn integrationTest

    compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    build.dependsOn dependencyUpdates

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}
